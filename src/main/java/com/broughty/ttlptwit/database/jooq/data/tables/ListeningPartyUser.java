/*
 * This file is generated by jOOQ.
 */
package com.broughty.ttlptwit.database.jooq.data.tables;


import com.broughty.ttlptwit.database.jooq.data.DefaultSchema;
import com.broughty.ttlptwit.database.jooq.data.Keys;
import com.broughty.ttlptwit.database.jooq.data.tables.records.ListeningPartyUserRecord;
import java.time.LocalDateTime;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ListeningPartyUser extends TableImpl<ListeningPartyUserRecord> {

    /**
     * The reference instance of <code>LISTENING_PARTY_USER</code>
     */
    public static final  ListeningPartyUser                                  LISTENING_PARTY_USER = new ListeningPartyUser();
    private static final long                                                serialVersionUID     = 1L;
    /**
     * The column <code>LISTENING_PARTY_USER.ID</code>.
     */
    public final         TableField<ListeningPartyUserRecord, Long>
                                                                             ID                   =
        createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.USER_ID</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             USER_ID              =
        createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(64).nullable(false), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.NAME</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             NAME                 =
        createField(DSL.name("NAME"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.DISPLAY_NAME</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             DISPLAY_NAME         =
        createField(DSL.name("DISPLAY_NAME"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.LOCATION</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             LOCATION             =
        createField(DSL.name("LOCATION"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.DESCRIPTION</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             DESCRIPTION          =
        createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.CREATED_AT</code>.
     */
    public final         TableField<ListeningPartyUserRecord, LocalDateTime>
                                                                             CREATED_AT           =
        createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.FOLLOWERS</code>.
     */
    public final         TableField<ListeningPartyUserRecord, Integer>
                                                                             FOLLOWERS            =
        createField(DSL.name("FOLLOWERS"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.FOLLOWING</code>.
     */
    public final         TableField<ListeningPartyUserRecord, Integer>
                                                                             FOLLOWING            =
        createField(DSL.name("FOLLOWING"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.TWEETS</code>.
     */
    public final         TableField<ListeningPartyUserRecord, Integer>
                                                                             TWEETS               =
        createField(DSL.name("TWEETS"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.LANG</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             LANG                 =
        createField(DSL.name("LANG"), SQLDataType.VARCHAR(64), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.URL</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             URL                  =
        createField(DSL.name("URL"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>LISTENING_PARTY_USER.PROFILE_URL</code>.
     */
    public final         TableField<ListeningPartyUserRecord, String>
                                                                             PROFILE_URL          =
        createField(DSL.name("PROFILE_URL"), SQLDataType.VARCHAR(512), this, "");

    private ListeningPartyUser(Name alias, Table<ListeningPartyUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListeningPartyUser(Name alias, Table<ListeningPartyUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTENING_PARTY_USER</code> table reference
     */
    public ListeningPartyUser(String alias) {
        this(DSL.name(alias), LISTENING_PARTY_USER);
    }

    /**
     * Create an aliased <code>LISTENING_PARTY_USER</code> table reference
     */
    public ListeningPartyUser(Name alias) {
        this(alias, LISTENING_PARTY_USER);
    }

    /**
     * Create a <code>LISTENING_PARTY_USER</code> table reference
     */
    public ListeningPartyUser() {
        this(DSL.name("LISTENING_PARTY_USER"), null);
    }

    public <O extends Record> ListeningPartyUser(Table<O> child, ForeignKey<O, ListeningPartyUserRecord> key) {
        super(child, key, LISTENING_PARTY_USER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListeningPartyUserRecord> getRecordType() {
        return ListeningPartyUserRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ListeningPartyUserRecord, Long> getIdentity() {
        return (Identity<ListeningPartyUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ListeningPartyUserRecord> getPrimaryKey() {
        return Keys.PK_LISTENING_PARTY_USER;
    }

    @Override
    public ListeningPartyUser as(String alias) {
        return new ListeningPartyUser(DSL.name(alias), this);
    }

    @Override
    public ListeningPartyUser as(Name alias) {
        return new ListeningPartyUser(alias, this);
    }

    @Override
    public ListeningPartyUser as(Table<?> alias) {
        return new ListeningPartyUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningPartyUser rename(String name) {
        return new ListeningPartyUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningPartyUser rename(Name name) {
        return new ListeningPartyUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningPartyUser rename(Table<?> name) {
        return new ListeningPartyUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, String, String, LocalDateTime, Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
                                      Function13<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

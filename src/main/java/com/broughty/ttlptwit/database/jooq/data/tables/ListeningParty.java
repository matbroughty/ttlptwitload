/*
 * This file is generated by jOOQ.
 */
package com.broughty.ttlptwit.database.jooq.data.tables;


import com.broughty.ttlptwit.database.jooq.data.DefaultSchema;
import com.broughty.ttlptwit.database.jooq.data.Keys;
import com.broughty.ttlptwit.database.jooq.data.tables.records.ListeningPartyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListeningParty extends TableImpl<ListeningPartyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LISTENING_PARTY</code>
     */
    public static final ListeningParty LISTENING_PARTY = new ListeningParty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListeningPartyRecord> getRecordType() {
        return ListeningPartyRecord.class;
    }

    /**
     * The column <code>LISTENING_PARTY.PARTY_DATE</code>.
     */
    public final TableField<ListeningPartyRecord, LocalDateTime> PARTY_DATE = createField(DSL.name("PARTY_DATE"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>LISTENING_PARTY.ARTIST</code>.
     */
    public final TableField<ListeningPartyRecord, String> ARTIST = createField(DSL.name("ARTIST"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>LISTENING_PARTY.ALBUM</code>.
     */
    public final TableField<ListeningPartyRecord, String> ALBUM = createField(DSL.name("ALBUM"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>LISTENING_PARTY.ANNOUNCEMENT_TWEET</code>.
     */
    public final TableField<ListeningPartyRecord, String> ANNOUNCEMENT_TWEET = createField(DSL.name("ANNOUNCEMENT_TWEET"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>LISTENING_PARTY.REPLAY_LINK</code>.
     */
    public final TableField<ListeningPartyRecord, String> REPLAY_LINK = createField(DSL.name("REPLAY_LINK"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.TWEETERS</code>.
     */
    public final TableField<ListeningPartyRecord, String> TWEETERS = createField(DSL.name("TWEETERS"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.COLLECTION_LINK</code>.
     */
    public final TableField<ListeningPartyRecord, String> COLLECTION_LINK = createField(DSL.name("COLLECTION_LINK"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.ALBUM_LINK</code>.
     */
    public final TableField<ListeningPartyRecord, String> ALBUM_LINK = createField(DSL.name("ALBUM_LINK"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.ALBUM_IMAGE_LARGE</code>.
     */
    public final TableField<ListeningPartyRecord, String> ALBUM_IMAGE_LARGE = createField(DSL.name("ALBUM_IMAGE_LARGE"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.ALBUM_IMAGE_SMALL</code>.
     */
    public final TableField<ListeningPartyRecord, String> ALBUM_IMAGE_SMALL = createField(DSL.name("ALBUM_IMAGE_SMALL"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>LISTENING_PARTY.ALBUM_RELEASE_DATE</code>.
     */
    public final TableField<ListeningPartyRecord, String> ALBUM_RELEASE_DATE = createField(DSL.name("ALBUM_RELEASE_DATE"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>LISTENING_PARTY.TTLP_NO</code>.
     */
    public final TableField<ListeningPartyRecord, Integer> TTLP_NO = createField(DSL.name("TTLP_NO"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>LISTENING_PARTY.LAST_STATE</code>.
     */
    public final TableField<ListeningPartyRecord, Integer> LAST_STATE = createField(DSL.name("LAST_STATE"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>LISTENING_PARTY.REQUIRES_UPDATE</code>.
     */
    public final TableField<ListeningPartyRecord, Boolean> REQUIRES_UPDATE = createField(DSL.name("REQUIRES_UPDATE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("TRUE", SQLDataType.BOOLEAN)), this, "");

    private ListeningParty(Name alias, Table<ListeningPartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListeningParty(Name alias, Table<ListeningPartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTENING_PARTY</code> table reference
     */
    public ListeningParty(String alias) {
        this(DSL.name(alias), LISTENING_PARTY);
    }

    /**
     * Create an aliased <code>LISTENING_PARTY</code> table reference
     */
    public ListeningParty(Name alias) {
        this(alias, LISTENING_PARTY);
    }

    /**
     * Create a <code>LISTENING_PARTY</code> table reference
     */
    public ListeningParty() {
        this(DSL.name("LISTENING_PARTY"), null);
    }

    public <O extends Record> ListeningParty(Table<O> child, ForeignKey<O, ListeningPartyRecord> key) {
        super(child, key, LISTENING_PARTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ListeningPartyRecord> getPrimaryKey() {
        return Keys.PK_LISTENING_PARTY;
    }

    @Override
    public List<UniqueKey<ListeningPartyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_C);
    }

    @Override
    public ListeningParty as(String alias) {
        return new ListeningParty(DSL.name(alias), this);
    }

    @Override
    public ListeningParty as(Name alias) {
        return new ListeningParty(alias, this);
    }

    @Override
    public ListeningParty as(Table<?> alias) {
        return new ListeningParty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningParty rename(String name) {
        return new ListeningParty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningParty rename(Name name) {
        return new ListeningParty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListeningParty rename(Table<?> name) {
        return new ListeningParty(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<LocalDateTime, String, String, String, String, String, String, String, String, String, String, Integer, Integer, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
